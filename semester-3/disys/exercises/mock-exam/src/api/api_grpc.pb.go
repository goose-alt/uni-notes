// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IncrementServiceClient is the client API for IncrementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IncrementServiceClient interface {
	Increment(ctx context.Context, in *IncrementRequest, opts ...grpc.CallOption) (*IncrementResponse, error)
	GetCurrentValue(ctx context.Context, in *CurrentValueRequest, opts ...grpc.CallOption) (*CurrentValueResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Election(ctx context.Context, in *ElectionRequest, opts ...grpc.CallOption) (*ElectionResponse, error)
	ClaimLeader(ctx context.Context, in *LeaderAnnouncement, opts ...grpc.CallOption) (*LeaderAnnouncementAck, error)
}

type incrementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIncrementServiceClient(cc grpc.ClientConnInterface) IncrementServiceClient {
	return &incrementServiceClient{cc}
}

func (c *incrementServiceClient) Increment(ctx context.Context, in *IncrementRequest, opts ...grpc.CallOption) (*IncrementResponse, error) {
	out := new(IncrementResponse)
	err := c.cc.Invoke(ctx, "/IncrementService/Increment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incrementServiceClient) GetCurrentValue(ctx context.Context, in *CurrentValueRequest, opts ...grpc.CallOption) (*CurrentValueResponse, error) {
	out := new(CurrentValueResponse)
	err := c.cc.Invoke(ctx, "/IncrementService/GetCurrentValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incrementServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/IncrementService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incrementServiceClient) Election(ctx context.Context, in *ElectionRequest, opts ...grpc.CallOption) (*ElectionResponse, error) {
	out := new(ElectionResponse)
	err := c.cc.Invoke(ctx, "/IncrementService/Election", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incrementServiceClient) ClaimLeader(ctx context.Context, in *LeaderAnnouncement, opts ...grpc.CallOption) (*LeaderAnnouncementAck, error) {
	out := new(LeaderAnnouncementAck)
	err := c.cc.Invoke(ctx, "/IncrementService/ClaimLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IncrementServiceServer is the server API for IncrementService service.
// All implementations must embed UnimplementedIncrementServiceServer
// for forward compatibility
type IncrementServiceServer interface {
	Increment(context.Context, *IncrementRequest) (*IncrementResponse, error)
	GetCurrentValue(context.Context, *CurrentValueRequest) (*CurrentValueResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Election(context.Context, *ElectionRequest) (*ElectionResponse, error)
	ClaimLeader(context.Context, *LeaderAnnouncement) (*LeaderAnnouncementAck, error)
	mustEmbedUnimplementedIncrementServiceServer()
}

// UnimplementedIncrementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIncrementServiceServer struct {
}

func (UnimplementedIncrementServiceServer) Increment(context.Context, *IncrementRequest) (*IncrementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Increment not implemented")
}
func (UnimplementedIncrementServiceServer) GetCurrentValue(context.Context, *CurrentValueRequest) (*CurrentValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentValue not implemented")
}
func (UnimplementedIncrementServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedIncrementServiceServer) Election(context.Context, *ElectionRequest) (*ElectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Election not implemented")
}
func (UnimplementedIncrementServiceServer) ClaimLeader(context.Context, *LeaderAnnouncement) (*LeaderAnnouncementAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimLeader not implemented")
}
func (UnimplementedIncrementServiceServer) mustEmbedUnimplementedIncrementServiceServer() {}

// UnsafeIncrementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IncrementServiceServer will
// result in compilation errors.
type UnsafeIncrementServiceServer interface {
	mustEmbedUnimplementedIncrementServiceServer()
}

func RegisterIncrementServiceServer(s grpc.ServiceRegistrar, srv IncrementServiceServer) {
	s.RegisterService(&IncrementService_ServiceDesc, srv)
}

func _IncrementService_Increment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncrementServiceServer).Increment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IncrementService/Increment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncrementServiceServer).Increment(ctx, req.(*IncrementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncrementService_GetCurrentValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncrementServiceServer).GetCurrentValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IncrementService/GetCurrentValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncrementServiceServer).GetCurrentValue(ctx, req.(*CurrentValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncrementService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncrementServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IncrementService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncrementServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncrementService_Election_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncrementServiceServer).Election(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IncrementService/Election",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncrementServiceServer).Election(ctx, req.(*ElectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncrementService_ClaimLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderAnnouncement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncrementServiceServer).ClaimLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IncrementService/ClaimLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncrementServiceServer).ClaimLeader(ctx, req.(*LeaderAnnouncement))
	}
	return interceptor(ctx, in, info, handler)
}

// IncrementService_ServiceDesc is the grpc.ServiceDesc for IncrementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IncrementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "IncrementService",
	HandlerType: (*IncrementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Increment",
			Handler:    _IncrementService_Increment_Handler,
		},
		{
			MethodName: "GetCurrentValue",
			Handler:    _IncrementService_GetCurrentValue_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _IncrementService_Ping_Handler,
		},
		{
			MethodName: "Election",
			Handler:    _IncrementService_Election_Handler,
		},
		{
			MethodName: "ClaimLeader",
			Handler:    _IncrementService_ClaimLeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
